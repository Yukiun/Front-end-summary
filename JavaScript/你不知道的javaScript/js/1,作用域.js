// 作用域是一套规则,用于确定在何处以及如何查找变量(标识符),如果查找的目的是对变量进行赋值,那么会使用LHS查询,如果目的是获取变量的值,就会用RHS查询

// 异常 区分LHS查询与RHS查询,在变量哈没有声明的情况下,这两种查询行为是不一样的

function foo(a) {
    console.log( a + b );
    b = a;
}
foo(2);

// 第一次对b进行RHS查询时无法找到该变量,如果RHS查询在所有嵌套的作用域中遍寻不到所需的变量,就会抛出ReferenceError异常,如果RHS查询找到了一个变量,但是你尝试对这个变量进行了不合理的操作,或者引用null,undefined类型中的属性,会抛出TypeError
// 当引擎执行LHS查询,如果在全局作用域中也无法找到目标变量,全局作用域就会创建一个具有该名称的变量,并将其返还给引擎,

// 1,var a在其作用域中声明新变量,这会在最开始的阶段,也就是代码执行前进行;
// 2,a = 2会查询(LHS查询)变量并对其进行赋值

function foo(a) {
    var b = a;
    return a + b;
}
var c = foo(2);

// 1,找出所有的LHS查询(3)
// c = ..;a = 2(隐式变量分配);b = ..;
// 2,找出所有的RHS查询(4)
//foo(2 ..); = a; a ..;..b;